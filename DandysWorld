-- MGI View v4.3
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Workspace = game:GetService("Workspace")
local Lighting = game:GetService("Lighting")

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

local EXISTING = PlayerGui:FindFirstChild("MGIViewGUI")
if EXISTING then
    EXISTING:Destroy()
end

local Theme = {
    Background = Color3.fromRGB(12, 14, 18),
    Panel = Color3.fromRGB(18, 22, 30),
    Accent = Color3.fromRGB(0, 153, 255),
    AccentAlt = Color3.fromRGB(0, 115, 230),
    Text = Color3.fromRGB(230, 240, 255),
    Subtle = Color3.fromRGB(38, 46, 60),
    Stroke = Color3.fromRGB(25, 35, 55),
}

local Settings = {
    OutlineOnly = false,
    AlwaysOnTop = true,
    FillTransparency = 0.75,
    OutlineTransparency = 0,
    FullBright = false,
    SpeedEnabled = false,
    SpeedValue = 16,
    SpeedLocked = false,
}

local LightingBackup = {
    Brightness = nil,
    ClockTime = nil,
    FogEnd = nil,
    FogStart = nil,
    GlobalShadows = nil,
    OutdoorAmbient = nil,
    Ambient = nil,
    ColorShift_Top = nil,
    ColorShift_Bottom = nil,
    EnvironmentDiffuseScale = nil,
    EnvironmentSpecularScale = nil,
    ShadowSoftness = nil,
    Technology = nil,
}


local function saveLightingSettings()
    LightingBackup.Brightness = Lighting.Brightness
    LightingBackup.ClockTime = Lighting.ClockTime
    LightingBackup.FogEnd = Lighting.FogEnd
    LightingBackup.FogStart = Lighting.FogStart
    LightingBackup.GlobalShadows = Lighting.GlobalShadows
    LightingBackup.OutdoorAmbient = Lighting.OutdoorAmbient
    LightingBackup.Ambient = Lighting.Ambient
    LightingBackup.ColorShift_Top = Lighting.ColorShift_Top
    LightingBackup.ColorShift_Bottom = Lighting.ColorShift_Bottom
    LightingBackup.EnvironmentDiffuseScale = Lighting.EnvironmentDiffuseScale
    LightingBackup.EnvironmentSpecularScale = Lighting.EnvironmentSpecularScale
    LightingBackup.ShadowSoftness = Lighting.ShadowSoftness
    LightingBackup.Technology = Lighting.Technology
end

local function applyFullBright()
        if LightingBackup.Brightness == nil then
        saveLightingSettings()
    end
    
        Lighting.Brightness = 3
    Lighting.ClockTime = 14
    Lighting.FogEnd = 100000
    Lighting.FogStart = 0
    Lighting.GlobalShadows = false
    Lighting.OutdoorAmbient = Color3.fromRGB(255, 255, 255)
    Lighting.Ambient = Color3.fromRGB(255, 255, 255)
    Lighting.ColorShift_Top = Color3.fromRGB(0, 0, 0)
    Lighting.ColorShift_Bottom = Color3.fromRGB(0, 0, 0)
    Lighting.EnvironmentDiffuseScale = 1
    Lighting.EnvironmentSpecularScale = 1
    Lighting.ShadowSoftness = 0
    Lighting.Technology = Enum.Technology.Compatibility
end

local function restoreLighting()
    if LightingBackup.Brightness ~= nil then
        Lighting.Brightness = LightingBackup.Brightness
        Lighting.ClockTime = LightingBackup.ClockTime
        Lighting.FogEnd = LightingBackup.FogEnd
        Lighting.FogStart = LightingBackup.FogStart
        Lighting.GlobalShadows = LightingBackup.GlobalShadows
        Lighting.OutdoorAmbient = LightingBackup.OutdoorAmbient
        Lighting.Ambient = LightingBackup.Ambient
        Lighting.ColorShift_Top = LightingBackup.ColorShift_Top
        Lighting.ColorShift_Bottom = LightingBackup.ColorShift_Bottom
        Lighting.EnvironmentDiffuseScale = LightingBackup.EnvironmentDiffuseScale
        Lighting.EnvironmentSpecularScale = LightingBackup.EnvironmentSpecularScale
        Lighting.ShadowSoftness = LightingBackup.ShadowSoftness
        Lighting.Technology = LightingBackup.Technology
    end
end

local SpeedConnection = nil

local function applySpeed()
    if SpeedConnection then
        SpeedConnection:Disconnect()
        SpeedConnection = nil
    end
    
    if not Settings.SpeedEnabled then return end
    
    SpeedConnection = RunService.Heartbeat:Connect(function()
        local char = LocalPlayer.Character
        if char then
            local humanoid = char:FindFirstChild("Humanoid")
            if humanoid and Settings.SpeedLocked then
                humanoid.WalkSpeed = Settings.SpeedValue
            end
        end
    end)
end

local function getCurrentSpeed()
    local char = LocalPlayer.Character
    if char then
        local humanoid = char:FindFirstChild("Humanoid")
        if humanoid then
            return humanoid.WalkSpeed
        end
    end
    return 16
end

local function teleportToElevator()
    local elevators = Workspace:FindFirstChild("Elevators")
    if not elevators then return false end
    
    local elevator = elevators:FindFirstChild("Elevator")
    if not elevator then return false end
    
    local spawnZone = elevator:FindFirstChild("MonsterBlocker")
    if not spawnZone or not spawnZone:IsA("BasePart") then return false end
    
    local char = LocalPlayer.Character
    if not char then return false end
    
    local humanoidRootPart = char:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return false end
    
    humanoidRootPart.CFrame = spawnZone.CFrame + Vector3.new(0, 3, 0)
    return true
end

local Config = {
    Monsters = {
        tagName = "HL_Monsters",
        color = Color3.fromRGB(255, 40, 40),
        folderName = "Monsters",
        filter = function(obj)
            return obj:IsA("Model") and obj.Name:match("Monster$")
        end
    },
    Generators = {
        tagName = "HL_Generators",
        color = Color3.fromRGB(0, 120, 255),
        folderName = "Generators",
        filter = function(obj)
            return obj:IsA("Model") or obj:IsA("BasePart")
        end
    },
    Items = {
        tagName = "HL_Items",
        color = Color3.fromRGB(80, 160, 255),
        folderName = "Items",
        filter = function(obj)
            return obj:IsA("Model") or obj:IsA("BasePart")
        end
    },
    Players = {
        tagName = "HL_Players",
        color = Color3.fromRGB(120, 100, 255),
        filter = function(obj)
            return obj:IsA("Model") and obj:FindFirstChild("Humanoid")
        end
    }
}

local Toggles = {
    Monsters = true,
    Generators = true,
    Items = true,
    Players = true,
}

local Active = {
    Monsters = {},
    Generators = {},
    Items = {},
    Players = {},
}

local Cleanup = {
    Monsters = {},
    Generators = {},
    Items = {},
    Players = {},
}

local RoomConns = {}

local QueueMap = {}
local QueueList = {}

local function enqueue(inst)
    if inst and inst.Parent and not QueueMap[inst] then
        QueueMap[inst] = true
        table.insert(QueueList, inst)
    end
end

local function disconnectAll(list)
    for k, v in pairs(list) do
        if typeof(v) == "RBXScriptConnection" then
            v:Disconnect()
        end
        list[k] = nil
    end
end

local function getCurrentRoom()
    return Workspace:FindFirstChild("CurrentRoom") or Workspace:WaitForChild("CurrentRoom")
end

local function findTopUnderFolder(inst, folderName)
    local cr = Workspace:FindFirstChild("CurrentRoom")
    local cur = inst
    while cur and cur.Parent do
        if cur.Parent and cur.Parent.Name == folderName then
            return cur
        end
        if cur == cr then break end
        cur = cur.Parent
    end
    return nil
end

local function removeHighlight(typeKey, obj)
    local hl = Active[typeKey][obj]
    if hl then
        hl:Destroy()
    end
    Active[typeKey][obj] = nil
    if Cleanup[typeKey][obj] then
        Cleanup[typeKey][obj]:Disconnect()
        Cleanup[typeKey][obj] = nil
    end
end

local function applySettingsToHighlight(hl)
    if not hl then return end
    hl.FillTransparency = Settings.OutlineOnly and 1 or Settings.FillTransparency
    hl.OutlineTransparency = Settings.OutlineTransparency
    hl.DepthMode = Settings.AlwaysOnTop and Enum.HighlightDepthMode.AlwaysOnTop or Enum.HighlightDepthMode.Occluded
end

local function createHighlight(typeKey, obj)
    if Active[typeKey][obj] then return end

    local cfg = Config[typeKey]
    local existing = obj:FindFirstChild(cfg.tagName)
    if existing then
        existing:Destroy()
    end

    local hl = Instance.new("Highlight")
    hl.Name = cfg.tagName
    hl.FillColor = cfg.color
    hl.OutlineColor = cfg.color
    applySettingsToHighlight(hl)
    hl.Adornee = obj
    hl.Parent = obj

    Active[typeKey][obj] = hl
    Cleanup[typeKey][obj] = obj.AncestryChanged:Connect(function(_, parent)
        if parent == nil then
            removeHighlight(typeKey, obj)
        end
    end)
end

local function applySettingsToAll()
    for _, map in pairs(Active) do
        for _, hl in pairs(map) do
            applySettingsToHighlight(hl)
        end
    end
end

local function clearHighlights(typeKey)
    for obj, _ in pairs(Active[typeKey]) do
        removeHighlight(typeKey, obj)
    end
end

local function clearAllHighlights()
    for typeKey, _ in pairs(Active) do
        clearHighlights(typeKey)
    end
end

local PlayerConns = {}

local function attachPlayerCharacter(p, character)
    if not Toggles.Players then return end
    if character and Config.Players.filter(character) then
        createHighlight("Players", character)
    end
end

local function handlePlayer(p)
    if PlayerConns[p] then
        for _, c in ipairs(PlayerConns[p]) do
            if typeof(c) == "RBXScriptConnection" then c:Disconnect() end
        end
        PlayerConns[p] = nil
    end

    PlayerConns[p] = {}

    table.insert(PlayerConns[p], p.CharacterAdded:Connect(function(char)
        task.defer(function()
            attachPlayerCharacter(p, char)
        end)
    end))

    table.insert(PlayerConns[p], p.CharacterRemoving:Connect(function(char)
        removeHighlight("Players", char)
    end))
    if p.Character then
        attachPlayerCharacter(p, p.Character)
    end
end

local function initPlayers()
    clearHighlights("Players")
    for _, p in ipairs(Players:GetPlayers()) do
        handlePlayer(p)
    end
end

Players.PlayerAdded:Connect(handlePlayer)
Players.PlayerRemoving:Connect(function(p)
    if PlayerConns[p] then
        for _, c in ipairs(PlayerConns[p]) do
            if typeof(c) == "RBXScriptConnection" then c:Disconnect() end
        end
        PlayerConns[p] = nil
    end
end)

local function processCandidate(inst)
    if not inst or not inst.Parent then return end
    for typeKey, cfg in pairs(Config) do
        if typeKey ~= "Players" and Toggles[typeKey] then
            local target = findTopUnderFolder(inst, cfg.folderName)
            if target and cfg.filter(target) then
                createHighlight(typeKey, target)
            end
        end
    end
end

local function removeIfActive(inst)
    for typeKey, map in pairs(Active) do
        if map[inst] then
            removeHighlight(typeKey, inst)
        end
    end
end

local function rescanCurrentRoom()
    local cr = Workspace:FindFirstChild("CurrentRoom")
    if not cr then return end
    for _, inst in ipairs(cr:GetDescendants()) do
        enqueue(inst)
    end
end

local function bindCurrentRoom()
    disconnectAll(RoomConns)

    local currentRoom = getCurrentRoom()
    table.insert(RoomConns, currentRoom.DescendantAdded:Connect(function(inst)
        enqueue(inst)
    end))
    table.insert(RoomConns, currentRoom.DescendantRemoving:Connect(function(inst)
        removeIfActive(inst)
        if QueueMap[inst] then
            QueueMap[inst] = nil
        end
    end))
    table.insert(RoomConns, currentRoom.AncestryChanged:Connect(function(_, parent)
        if parent == nil then
            task.defer(bindCurrentRoom)
        end
    end))
    for _, inst in ipairs(currentRoom:GetDescendants()) do
        enqueue(inst)
    end
end

RunService.Heartbeat:Connect(function()
    local processed = 0
    local cap = 100
    while processed < cap and #QueueList > 0 do
        local inst = table.remove(QueueList, 1)
        if inst and QueueMap[inst] then
            QueueMap[inst] = nil
            processCandidate(inst)
            processed = processed + 1
        end
    end
end)

local function buildUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "MGIViewGUI"
    screenGui.IgnoreGuiInset = true
    screenGui.ResetOnSpawn = false
    screenGui.Parent = PlayerGui

    local frame = Instance.new("Frame")
    frame.Name = "MainFrame"
    frame.Size = UDim2.new(0, 420, 0, 48) -- Altura inicial apenas para o header
    frame.Position = UDim2.new(0.5, -210, 0.5, -240)
    frame.BackgroundColor3 = Theme.Background
    frame.BorderSizePixel = 0
    frame.ClipsDescendants = true
    frame.Parent = screenGui

    local frameCorner = Instance.new("UICorner")
    frameCorner.CornerRadius = UDim.new(0, 12)
    frameCorner.Parent = frame

    local frameStroke = Instance.new("UIStroke")
    frameStroke.Thickness = 1
    frameStroke.Color = Theme.Stroke
    frameStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    frameStroke.Parent = frame

    local header = Instance.new("Frame")
    header.Name = "Header"
    header.Size = UDim2.new(1, 0, 0, 44)
    header.BackgroundColor3 = Theme.Panel
    header.Parent = frame

    local headerCorner = Instance.new("UICorner")
    headerCorner.CornerRadius = UDim.new(0, 12)
    headerCorner.Parent = header

    local headerStroke = Instance.new("UIStroke")
    headerStroke.Thickness = 1
    headerStroke.Color = Theme.Stroke
    headerStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    headerStroke.Parent = header

    local grad = Instance.new("UIGradient")
    grad.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Theme.Panel),
        ColorSequenceKeypoint.new(1, Theme.Background)
    })
    grad.Rotation = 90
    grad.Parent = header

    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.BackgroundTransparency = 1
    title.Position = UDim2.new(0, 12, 0, 0)
    title.Size = UDim2.new(1, -180, 1, 0)
    title.Font = Enum.Font.GothamBold
    title.Text = "MGPI Viewer by Nightmice"
    title.TextColor3 = Theme.Text
    title.TextSize = 18
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Parent = header

    local controls = Instance.new("Frame")
    controls.Name = "Controls"
    controls.BackgroundTransparency = 1
    controls.Size = UDim2.new(0, 160, 1, 0)
    controls.Position = UDim2.new(1, -162, 0, 0)
    controls.Parent = header

    local controlLayout = Instance.new("UIListLayout")
    controlLayout.FillDirection = Enum.FillDirection.Horizontal
    controlLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
    controlLayout.VerticalAlignment = Enum.VerticalAlignment.Center
    controlLayout.Padding = UDim.new(0, 8)
    controlLayout.Parent = controls

    local function makeButton(txt, bg)
        local b = Instance.new("TextButton")
        b.Size = UDim2.new(0, 36, 0, 28)
        b.BackgroundColor3 = bg
        b.Text = txt
        b.TextColor3 = Theme.Text
        b.Font = Enum.Font.GothamBold
        b.TextSize = 18
        b.AutoButtonColor = false
        b.Parent = controls

        local c = Instance.new("UICorner")
        c.CornerRadius = UDim.new(0, 8)
        c.Parent = b

        local s = Instance.new("UIStroke")
        s.Thickness = 1
        s.Color = Theme.Stroke
        s.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        s.Parent = b

        return b
    end

    local refreshBtn = makeButton("R", Theme.Subtle)
    local minimizeBtn = makeButton("_", Theme.Subtle)
    local closeBtn = makeButton("X", Color3.fromRGB(185, 40, 40))

        local content = Instance.new("Frame")
    content.Name = "Content"
    content.Size = UDim2.new(1, -24, 1, -72) -- Ocupa o espaço restante
    content.Position = UDim2.new(0, 12, 0, 60)
    content.BackgroundColor3 = Theme.Panel
    content.Parent = frame
        local contentCorner = Instance.new("UICorner")
    contentCorner.CornerRadius = UDim.new(0, 10)
    contentCorner.Parent = content

    local contentStroke = Instance.new("UIStroke")
    contentStroke.Thickness = 1
    contentStroke.Color = Theme.Stroke
    contentStroke.Parent = content

    local scrolling = Instance.new("ScrollingFrame")
    scrolling.Name = "Scroll"
    scrolling.Size = UDim2.fromScale(1, 1)
    -- scrolling.AutomaticSize = Enum.AutomaticSize.Y -- Removido para controle manual do CanvasSize
    scrolling.BackgroundTransparency = 1
    scrolling.BorderSizePixel = 0
    scrolling.ScrollBarThickness = 4
    scrolling.ScrollBarImageColor3 = Theme.Accent
    scrolling.Parent = content

    local list = Instance.new("UIListLayout")
    list.Padding = UDim.new(0, 8)
    list.FillDirection = Enum.FillDirection.Vertical
    list.SortOrder = Enum.SortOrder.LayoutOrder
    list.Parent = scrolling

    local padding = Instance.new("UIPadding")
    padding.PaddingTop = UDim.new(0, 24)
    padding.PaddingBottom = UDim.new(0, 24)
    padding.PaddingLeft = UDim.new(0, 24)
    padding.PaddingRight = UDim.new(0, 24)
    padding.Parent = scrolling

    list:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        scrolling.CanvasSize = UDim2.new(0, 0, 0, list.AbsoluteContentSize.Y + padding.PaddingTop.Offset + padding.PaddingBottom.Offset + 24)
    end)

    local function tween(obj, goal, time)
        TweenService:Create(obj, TweenInfo.new(time, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), goal):Play()
    end

        do
        local UserInputService = game:GetService("UserInputService")
        local dragging = false
        local dragStart, startPos
        header.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                dragStart = input.Position
                startPos = frame.Position
                -- Impede que eventos como LongPress interfiram
                header.Active = true
            end
        end)
        UserInputService.InputChanged:Connect(function(input)
            if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                local delta = input.Position - dragStart
                frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            end
        end)
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = false
            end
        end)
    end

    do -- Lógica de redimensionamento vertical
        local UserInputService = game:GetService("UserInputService")
        local resizing = false
        local resizeStart, startSize
        local minHeight = 150

        local resizeHandle = Instance.new("Frame")
        resizeHandle.Name = "ResizeHandle"
        resizeHandle.Size = UDim2.new(1, 0, 0, 10)
        resizeHandle.Position = UDim2.new(0, 0, 1, -10)
        resizeHandle.BackgroundTransparency = 1
        resizeHandle.ZIndex = 2 -- Garante que a alça fique sobre outros elementos
        resizeHandle.Parent = frame

        local grabberIcon = Instance.new("TextLabel")
        grabberIcon.Name = "GrabberIcon"
        grabberIcon.Size = UDim2.new(0, 60, 0, 10) -- Mais largo
        grabberIcon.Position = UDim2.new(0.5, -30, 1, -12) -- Centralizado
        grabberIcon.BackgroundTransparency = 1
        grabberIcon.Font = Enum.Font.SourceSansBold
        grabberIcon.Text = "• • •"
        grabberIcon.TextColor3 = Theme.Subtle
        grabberIcon.TextSize = 16
        grabberIcon.ZIndex = 3
        grabberIcon.Parent = frame

        resizeHandle.MouseEnter:Connect(function()
            UserInputService.MouseIcon = "rbxassetid://10495491134" -- Cursor de redimensionamento vertical
            tween(grabberIcon, {TextColor3 = Theme.Accent}, 0.15)
        end)
        resizeHandle.MouseLeave:Connect(function()
            if not resizing then UserInputService.MouseIcon = "" end
            tween(grabberIcon, {TextColor3 = Theme.Subtle}, 0.15)
        end)

        resizeHandle.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                resizing = true
                resizeStart = input.Position
                startSize = frame.AbsoluteSize
                -- Desativa o ajuste automático de altura do content para evitar conflitos
                content.AutomaticSize = Enum.AutomaticSize.None
                -- Impede que eventos como LongPress interfiram
                resizeHandle.Active = true
            end
        end)

        UserInputService.InputChanged:Connect(function(input)
            if resizing and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                local delta = input.Position - resizeStart
                local newHeight = math.max(minHeight, startSize.Y + delta.Y)
                frame.Size = UDim2.new(0, frame.AbsoluteSize.X, 0, newHeight)
            end
        end)

        UserInputService.InputEnded:Connect(function(input)
            if resizing and (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
                resizing = false
                UserInputService.MouseIcon = "" -- Garante que o cursor volte ao normal
            end
        end)
    end

    local function createToggle(labelText, color, initialState, onChanged, parentContainer)
        local row = Instance.new("Frame")
        row.BackgroundColor3 = Theme.Background
        row.BorderSizePixel = 0
        row.Size = UDim2.new(1, -8, 0, 40)
        row.Parent = parentContainer or scrolling

        local rowCorner = Instance.new("UICorner")
        rowCorner.CornerRadius = UDim.new(0, 8)
        rowCorner.Parent = row

        local rowStroke = Instance.new("UIStroke")
        rowStroke.Thickness = 1
        rowStroke.Color = Theme.Stroke
        rowStroke.Parent = row

        local label = Instance.new("TextLabel")
        label.BackgroundTransparency = 1
        label.Size = UDim2.new(1, -90, 1, 0)
        label.Position = UDim2.new(0, 10, 0, 0)
        label.Text = labelText
        label.Font = Enum.Font.Gotham
        label.TextSize = 16
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.TextColor3 = Theme.Text
        label.Parent = row

        local switch = Instance.new("TextButton")
        switch.Size = UDim2.new(0, 64, 0, 26)
        switch.Position = UDim2.new(1, -74, 0.5, -13)
        switch.BackgroundColor3 = Theme.Subtle
        switch.Text = ""
        switch.AutoButtonColor = false
        switch.Parent = row

        local switchCorner = Instance.new("UICorner") -- switchCorner
        switchCorner.CornerRadius = UDim.new(0, 13) -- 26/2
        switchCorner.Parent = switch

        local knob = Instance.new("Frame") -- knob
        knob.Size = UDim2.new(0, 22, 0, 22)
        knob.Position = initialState and UDim2.new(1, -24, 0, 2) or UDim2.new(0, 2, 0, 2)
        if initialState then
            knob.BackgroundColor3 = color
        else
            knob.BackgroundColor3 = Theme.Text
        end
        knob.Parent = switch
 
        local knobCorner = Instance.new("UICorner")
        knobCorner.CornerRadius = UDim.new(1, 0)
        knobCorner.Parent = knob
 
        local knobStroke = Instance.new("UIStroke")
        knobStroke.Thickness = 1
        knobStroke.Color = Theme.Stroke
        knobStroke.Parent = knob

        -- A fonte da verdade agora é a tabela Toggles
        Toggles[labelText] = Toggles[labelText] == nil and initialState or Toggles[labelText]

        local function render()
            local enabled = Toggles[labelText]
            tween(knob, {Position = enabled and UDim2.new(1, -24, 0, 2) or UDim2.new(0, 2, 0, 2)}, 0.15)
            knob.BackgroundColor3 = enabled and color or Theme.Text
            switch.BackgroundColor3 = enabled and Theme.AccentAlt or Theme.Subtle
        end

        switch.MouseButton1Click:Connect(function()
            -- O callback 'onChanged' é responsável por atualizar Toggles[labelText]
            -- Para toggles que não usam a tabela Toggles, o estado é gerenciado pelo callback.
            local currentState = Toggles[labelText]
            onChanged(not currentState)
            render() -- Redesenha o botão após a mudança
        end)
        
        -- Renderização inicial
        render()

        return row, render, switch
    end

    local function createSection(titleText)
        local headerRow = Instance.new("Frame")
        headerRow.BackgroundColor3 = Theme.Background
        headerRow.BorderSizePixel = 0
        headerRow.Size = UDim2.new(1, 0, 0, 36)
        headerRow.Parent = scrolling

        local headerCorner = Instance.new("UICorner")
        headerCorner.CornerRadius = UDim.new(0, 8)
        headerCorner.Parent = headerRow

        local headerStroke = Instance.new("UIStroke")
        headerStroke.Thickness = 1
        headerStroke.Color = Theme.Stroke
        headerStroke.Parent = headerRow

        local label = Instance.new("TextButton")
        label.BackgroundTransparency = 1
        label.Size = UDim2.new(1, -30, 1, 0)
        label.Position = UDim2.new(0, 10, 0, 0)
        label.Text = titleText
        label.Font = Enum.Font.GothamBold
        label.TextSize = 16
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.TextColor3 = Theme.Text
        label.AutoButtonColor = false
        label.Parent = headerRow

        local arrow = Instance.new("TextLabel")
        arrow.BackgroundTransparency = 1
        arrow.Size = UDim2.new(0, 20, 1, 0)
        arrow.Position = UDim2.new(1, -24, 0, 0)
        arrow.Text = "▶"
        arrow.Font = Enum.Font.GothamBold
        arrow.TextSize = 16
        arrow.TextColor3 = Theme.Text
        arrow.Parent = headerRow

        local container = Instance.new("Frame")
        container.BackgroundTransparency = 1
        container.Size = UDim2.new(1, 0, 0, 0)
        container.AutomaticSize = Enum.AutomaticSize.Y
        container.Visible = false
        container.Parent = scrolling

        local containerLayout = Instance.new("UIListLayout")
        containerLayout.Padding = UDim.new(0, 8)
        containerLayout.FillDirection = Enum.FillDirection.Vertical
        containerLayout.SortOrder = Enum.SortOrder.LayoutOrder
        containerLayout.Parent = container

        local expanded = false
        local function toggle()
            expanded = not expanded
            container.Visible = expanded
            arrow.Text = expanded and "▼" or "▶"
        end

        label.MouseButton1Click:Connect(toggle)

        return container, toggle
    end

    local function showNotification(text, duration)
        duration = duration or 1.5
        local notif = Instance.new("TextLabel")
        notif.Name = "Notification"
        notif.Size = UDim2.new(1, 0, 0, 30)
        notif.Position = UDim2.new(0, 0, 0, -30)
        notif.BackgroundColor3 = Theme.AccentAlt
        notif.Text = text
        notif.Font = Enum.Font.Gotham
        notif.TextSize = 14
        notif.TextColor3 = Theme.Text
        notif.Parent = frame

        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 8)
        corner.Parent = notif

        tween(notif, {Position = UDim2.new(0, 0, 0, 8)}, 0.2)
        task.wait(duration)
        tween(notif, {Position = UDim2.new(0, 0, 0, -30)}, 0.2)
        task.wait(0.2)
        notif:Destroy()
    end

    local minimized = false
    local expandedHeight = 450 -- Altura inicial padrão
    frame.Size = UDim2.new(0, 420, 0, expandedHeight)

    minimizeBtn.MouseButton1Click:Connect(function()
        minimized = not minimized
        if minimized then
            -- Salvar a altura expandida antes de minimizar
            expandedHeight = frame.AbsoluteSize.Y
            content.Visible = false
            tween(frame, {Size = UDim2.new(0, 420, 0, 48)}, 0.2)
            minimizeBtn.Text = "□"
        else
            content.Visible = true
            -- Restaurar a altura expandida
            -- Garante que a altura restaurada não seja menor que a mínima
            if expandedHeight <= 48 then
                expandedHeight = 450 -- Restaura para a altura padrão se algo der errado
            end
            tween(frame, {Size = UDim2.new(0, 420, 0, expandedHeight)}, 0.2)
            minimizeBtn.Text = "_"
        end
    end)

    refreshBtn.MouseButton1Click:Connect(function()
        rescanCurrentRoom()
        showNotification("Forçando atualização...", 1)
    end)

    closeBtn.MouseButton1Click:Connect(function()
        clearAllHighlights()
        disconnectAll(RoomConns)
        for _, pc in pairs(PlayerConns) do
            for _, c in ipairs(pc) do
                if typeof(c) == "RBXScriptConnection" then c:Disconnect() end
            end
        end
        if Settings.FullBright then
            restoreLighting()
        end
        if SpeedConnection then
            SpeedConnection:Disconnect()
        end
        -- Restaura a velocidade do jogador para o padrão
        local char = LocalPlayer.Character
        if char then
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            if humanoid then humanoid.WalkSpeed = 16 end
        end

        screenGui:Destroy()
    end)

    do
        local toggleControls = {} -- Armazenará {renderFunc, switchButton}
        local container, _ = createSection("Visibilidade")

        local mRow, mRender, mSwitch = createToggle("Monsters", Config.Monsters.color, Toggles.Monsters, function(state)
            Toggles.Monsters = state
            if not state then
                clearHighlights("Monsters")
            else
                rescanCurrentRoom()
            end
        end, container)
        toggleControls["Monsters"] = {render = mRender}

        local gRow, gRender, gSwitch = createToggle("Generators", Config.Generators.color, Toggles.Generators, function(state)
            Toggles.Generators = state
            if not state then
                clearHighlights("Generators")
            else
                rescanCurrentRoom()
            end
        end, container)
        toggleControls["Generators"] = {render = gRender}

        local iRow, iRender, iSwitch = createToggle("Items", Config.Items.color, Toggles.Items, function(state)
            Toggles.Items = state
            if not state then
                clearHighlights("Items")
            else
                rescanCurrentRoom()
            end
        end, container)
        toggleControls["Items"] = {render = iRender}

        local pRow, pRender, pSwitch = createToggle("Players", Config.Players.color, Toggles.Players, function(state)
            Toggles.Players = state
            if not state then
                clearHighlights("Players")
            else
                -- initPlayers já lida com seus próprios eventos, não precisa de bindCurrentRoom
                initPlayers()
            end
        end, container)
        toggleControls["Players"] = {render = pRender}
    end

        do
        local container, _ = createSection("Configurações Extras")

        createToggle("Iluminação total", Theme.Accent, Settings.FullBright, function(state)
            Settings.FullBright = state
            if state then
                applyFullBright()
            else
                restoreLighting()
            end
        end, container)

        createToggle("Somente contorno", Theme.Accent, Settings.OutlineOnly, function(state)
            Settings.OutlineOnly = state
            applySettingsToAll()
        end, container)

        createToggle("Sempre no topo", Theme.Accent, Settings.AlwaysOnTop, function(state)
            Settings.AlwaysOnTop = state
            applySettingsToAll()
        end, container)
    end

    do
        local container, _ = createSection("Velocidade")

        local speedRow = Instance.new("Frame")
        speedRow.BackgroundColor3 = Theme.Background
        speedRow.BorderSizePixel = 0
        speedRow.Size = UDim2.new(1, 0, 0, 100)
        speedRow.Parent = container

        local speedCorner = Instance.new("UICorner")
        speedCorner.CornerRadius = UDim.new(0, 8)
        speedCorner.Parent = speedRow

        local speedStroke = Instance.new("UIStroke")
        speedStroke.Thickness = 1
        speedStroke.Color = Theme.Stroke
        speedStroke.Parent = speedRow

        local speedLabel = Instance.new("TextLabel")
        speedLabel.BackgroundTransparency = 1
        speedLabel.Size = UDim2.new(0.5, -10, 0, 20)
        speedLabel.Position = UDim2.new(0, 10, 0, 10)
        speedLabel.Text = "Velocidade:"
        speedLabel.Font = Enum.Font.Gotham
        speedLabel.TextSize = 14
        speedLabel.TextXAlignment = Enum.TextXAlignment.Left
        speedLabel.TextColor3 = Theme.Text
        speedLabel.Parent = speedRow

        local speedDisplay = Instance.new("TextLabel")
        speedDisplay.BackgroundColor3 = Theme.Panel
        speedDisplay.Size = UDim2.new(0, 80, 0, 24)
        speedDisplay.Position = UDim2.new(1, -90, 0, 8)
        speedDisplay.Text = tostring(Settings.SpeedValue)
        speedDisplay.Font = Enum.Font.GothamBold
        speedDisplay.TextSize = 16
        speedDisplay.TextColor3 = Theme.Accent
        speedDisplay.Parent = speedRow

        local displayCorner = Instance.new("UICorner")
        displayCorner.CornerRadius = UDim.new(0, 6)
        displayCorner.Parent = speedDisplay

        local displayStroke = Instance.new("UIStroke")
        displayStroke.Thickness = 1
        displayStroke.Color = Theme.Stroke
        displayStroke.Parent = speedDisplay

        local sliderBg = Instance.new("Frame")
        sliderBg.BackgroundColor3 = Theme.Subtle
        sliderBg.Size = UDim2.new(1, -20, 0, 6)
        sliderBg.Position = UDim2.new(0, 10, 0, 45)
        sliderBg.Parent = speedRow

        local sliderBgCorner = Instance.new("UICorner")
        sliderBgCorner.CornerRadius = UDim.new(1, 0)
        sliderBgCorner.Parent = sliderBg

        local sliderFill = Instance.new("Frame")
        sliderFill.BackgroundColor3 = Theme.Accent
        sliderFill.Size = UDim2.new(0, 0, 1, 0)
        sliderFill.Parent = sliderBg

        local sliderFillCorner = Instance.new("UICorner")
        sliderFillCorner.CornerRadius = UDim.new(1, 0)
        sliderFillCorner.Parent = sliderFill

        local sliderKnob = Instance.new("Frame")
        sliderKnob.BackgroundColor3 = Theme.Accent
        sliderKnob.Size = UDim2.new(0, 18, 0, 18)
        sliderKnob.Position = UDim2.new(0, -9, 0.5, -9)
        sliderKnob.Parent = sliderBg

        local knobCorner = Instance.new("UICorner")
        knobCorner.CornerRadius = UDim.new(1, 0)
        knobCorner.Parent = sliderKnob

        local knobStroke = Instance.new("UIStroke")
        knobStroke.Thickness = 2
        knobStroke.Color = Theme.Stroke
        knobStroke.Parent = sliderKnob

        local minLabel = Instance.new("TextLabel")
        minLabel.BackgroundTransparency = 1
        minLabel.Size = UDim2.new(0, 30, 0, 20)
        minLabel.Position = UDim2.new(0, 10, 0, 55)
        minLabel.Text = "16"
        minLabel.Font = Enum.Font.Gotham
        minLabel.TextSize = 12
        minLabel.TextColor3 = Theme.Text
        minLabel.TextXAlignment = Enum.TextXAlignment.Left
        minLabel.Parent = speedRow

        local maxLabel = Instance.new("TextLabel")
        maxLabel.BackgroundTransparency = 1
        maxLabel.Size = UDim2.new(0, 30, 0, 20)
        maxLabel.Position = UDim2.new(1, -40, 0, 55)
        maxLabel.Text = "100"
        maxLabel.Font = Enum.Font.Gotham
        maxLabel.TextSize = 12
        maxLabel.TextColor3 = Theme.Text
        maxLabel.TextXAlignment = Enum.TextXAlignment.Right
        maxLabel.Parent = speedRow

        local lockBtn = Instance.new("TextButton")
        lockBtn.Size = UDim2.new(0, 80, 0, 24)
        lockBtn.Position = UDim2.new(0, 10, 1, -32)
        lockBtn.BackgroundColor3 = Theme.Subtle
        lockBtn.Text = "Travar"
        lockBtn.TextColor3 = Theme.Text
        lockBtn.Font = Enum.Font.GothamBold
        lockBtn.TextSize = 12
        lockBtn.AutoButtonColor = false
        lockBtn.Parent = speedRow

        local lockCorner = Instance.new("UICorner")
        lockCorner.CornerRadius = UDim.new(0, 6)
        lockCorner.Parent = lockBtn

        local lockStroke = Instance.new("UIStroke")
        lockStroke.Thickness = 1
        lockStroke.Color = Theme.Stroke
        lockStroke.Parent = lockBtn

        local function updateSlider(value)
            local percent = (value - 16) / (100 - 16)
            sliderKnob.Position = UDim2.new(percent, -9, 0.5, -9)
            sliderFill.Size = UDim2.new(percent, 0, 1, 0)
            speedDisplay.Text = tostring(math.floor(value))
            Settings.SpeedValue = value
            
            if Settings.SpeedEnabled and Settings.SpeedLocked then
                local char = LocalPlayer.Character
                if char then
                    local humanoid = char:FindFirstChild("Humanoid")
                    if humanoid then
                        humanoid.WalkSpeed = value
                    end
                end
            end
        end

        local dragging = false
        sliderKnob.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
            end
        end)

        sliderKnob.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = false
            end
        end)

        sliderBg.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                local pos = (input.Position.X - sliderBg.AbsolutePosition.X) / sliderBg.AbsoluteSize.X
                pos = math.clamp(pos, 0, 1)
                local value = 16 + (pos * (100 - 16))
                updateSlider(value)
            end
        end)

        game:GetService("UserInputService").InputChanged:Connect(function(input)
            if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                local pos = (input.Position.X - sliderBg.AbsolutePosition.X) / sliderBg.AbsoluteSize.X
                pos = math.clamp(pos, 0, 1)
                local value = 16 + (pos * (100 - 16))
                updateSlider(value)
            end
        end)

        game:GetService("UserInputService").InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = false
            end
        end)

        lockBtn.MouseButton1Click:Connect(function()
            Settings.SpeedLocked = not Settings.SpeedLocked
            if Settings.SpeedLocked then
                lockBtn.Text = "Travado"
                lockBtn.BackgroundColor3 = Theme.AccentAlt
            else
                lockBtn.Text = "Travar"
                lockBtn.BackgroundColor3 = Theme.Subtle
            end
            applySpeed()
        end)

        RunService.Heartbeat:Connect(function()
            if Settings.SpeedEnabled and not Settings.SpeedLocked then
                local currentSpeed = getCurrentSpeed()
                speedDisplay.Text = tostring(math.floor(currentSpeed))
            end
        end)

        updateSlider(Settings.SpeedValue)

        createToggle("Ativar corrida", Theme.Accent, Settings.SpeedEnabled, function(state)
            Settings.SpeedEnabled = state
            if state then
                applySpeed()
            else
                if SpeedConnection then
                    SpeedConnection:Disconnect()
                    SpeedConnection = nil
                end
            end
        end, container)
    end

    do
        local container, _ = createSection("GTE")

        local gteRow = Instance.new("Frame")
        gteRow.BackgroundColor3 = Theme.Background
        gteRow.BorderSizePixel = 0
        gteRow.Size = UDim2.new(1, 0, 0, 60)
        gteRow.Parent = container

        local gteCorner = Instance.new("UICorner")
        gteCorner.CornerRadius = UDim.new(0, 8)
        gteCorner.Parent = gteRow

        local gteStroke = Instance.new("UIStroke")
        gteStroke.Thickness = 1
        gteStroke.Color = Theme.Stroke
        gteStroke.Parent = gteRow

        local gteLabel = Instance.new("TextLabel")
        gteLabel.BackgroundTransparency = 1
        gteLabel.Size = UDim2.new(1, -20, 0, 20)
        gteLabel.Position = UDim2.new(0, 10, 0, 8)
        gteLabel.Text = "Teleportar para Elevador"
        gteLabel.Font = Enum.Font.Gotham
        gteLabel.TextSize = 14
        gteLabel.TextXAlignment = Enum.TextXAlignment.Left
        gteLabel.TextColor3 = Theme.Text
        gteLabel.Parent = gteRow

        local gteBtn = Instance.new("TextButton")
        gteBtn.Size = UDim2.new(1, -20, 0, 28)
        gteBtn.Position = UDim2.new(0, 10, 1, -36)
        gteBtn.BackgroundColor3 = Theme.Accent
        gteBtn.Text = "Teleportar"
        gteBtn.TextColor3 = Theme.Text
        gteBtn.Font = Enum.Font.GothamBold
        gteBtn.TextSize = 14
        gteBtn.AutoButtonColor = false
        gteBtn.Parent = gteRow

        local gteBtnCorner = Instance.new("UICorner")
        gteBtnCorner.CornerRadius = UDim.new(0, 6)
        gteBtnCorner.Parent = gteBtn

        local gteBtnStroke = Instance.new("UIStroke")
        gteBtnStroke.Thickness = 1
        gteBtnStroke.Color = Theme.Stroke
        gteBtnStroke.Parent = gteBtn

        gteBtn.MouseButton1Click:Connect(function()
            local success = teleportToElevator()
            if success then
                gteBtn.Text = "Teleportado!"
                gteBtn.BackgroundColor3 = Color3.fromRGB(0, 200, 100)
                task.wait(1)
                gteBtn.Text = "Teleportar"
                gteBtn.BackgroundColor3 = Theme.Accent
            else
                gteBtn.Text = "Elevador não encontrado"
                gteBtn.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
                task.wait(1.5)
                gteBtn.Text = "Teleportar"
                gteBtn.BackgroundColor3 = Theme.Accent
            end
        end)

        gteBtn.MouseEnter:Connect(function()
            if gteBtn.Text == "Teleportar" then
                tween(gteBtn, {BackgroundColor3 = Theme.AccentAlt}, 0.15)
            end
        end)

        gteBtn.MouseLeave:Connect(function()
            if gteBtn.Text == "Teleportar" then
                tween(gteBtn, {BackgroundColor3 = Theme.Accent}, 0.15)
            end
        end)
    end

    do
        local container, toggle = createSection("Sobre & Avisos")
        toggle() -- Deixa a seção aberta por padrão

        local infoRow = Instance.new("Frame")
        infoRow.BackgroundColor3 = Theme.Background
        infoRow.BorderSizePixel = 0
        infoRow.Size = UDim2.new(1, 0, 0, 0)
        infoRow.AutomaticSize = Enum.AutomaticSize.Y
        infoRow.Parent = container

        local infoCorner = Instance.new("UICorner")
        infoCorner.CornerRadius = UDim.new(0, 8)
        infoCorner.Parent = infoRow

        local infoText = Instance.new("TextLabel")
        infoText.BackgroundTransparency = 1
        infoText.Size = UDim2.new(1, -20, 0, 0)
        infoText.Position = UDim2.new(0, 10, 0, 10)
        infoText.AutomaticSize = Enum.AutomaticSize.Y
        infoText.RichText = true
        infoText.TextWrapped = true
        infoText.Font = Enum.Font.Gotham
        infoText.TextSize = 14
        infoText.TextColor3 = Theme.Text
        infoText.TextXAlignment = Enum.TextXAlignment.Left
        infoText.Text = "<b>Bem-vindo ao MGPI Viewer!</b> 🚀\n\nEste script te ajuda a navegar pelo jogo com algumas ferramentas úteis:\n\n    •  <b>ESP (Visualizador):</b> 👁️ Veja monstros, geradores, itens e outros jogadores através das paredes.\n    •  <b>Iluminação Total:</b> 💡 Deixe o mapa totalmente claro, sem sombras.\n    •  <b>Velocidade:</b> 🏃‍♂️ Ajuste e trave sua velocidade de corrida.\n    •  <b>Teleporte:</b> ➡️ Vá para o elevador instantaneamente.\n\n<font color='#ffcc00'>⚠️ <b>AVISO IMPORTANTE</b> ⚠️</font>\nEste script está em desenvolvimento (<b>BETA</b>). Podem ocorrer bugs ou erros. <b>Use por sua conta e risco.</b>"
        infoText.Parent = infoRow

        local padding = Instance.new("UIPadding")
        padding.PaddingBottom = UDim.new(0, 10)
        padding.Parent = infoRow
    end

    return screenGui
end

local gui = buildUI()

bindCurrentRoom()
initPlayers()
