local screenGui = Instance.new("ScreenGui")
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
screenGui.Name = "NightmiceMGIView"

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 400, 0, 300)
frame.Position = UDim2.new(0.5, -200, 0.5, -150)
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
frame.BorderSizePixel = 0
frame.ClipsDescendants = true
frame.Parent = screenGui

local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 20)
UICorner.Parent = frame

local headerLabel = Instance.new("TextLabel")
headerLabel.Size = UDim2.new(0.7, 0, 0, 40)
headerLabel.Position = UDim2.new(0, 10, 0, 10)
headerLabel.Text = "MGI View by Nightmice x ChatGpt"
headerLabel.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
headerLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
headerLabel.TextSize = 16
headerLabel.Font = Enum.Font.SourceSansBold
headerLabel.TextXAlignment = Enum.TextXAlignment.Center
headerLabel.Parent = frame
local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 9)
corner.Parent = headerLabel

local dragging, dragInput, dragStart, startPos
frame.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		dragging = true
		dragStart = input.Position
		startPos = frame.Position
	end
end)
frame.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
		local delta = input.Position - dragStart
		frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end
end)
frame.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		dragging = false
	end
end)

local minimizeButton = Instance.new("TextButton")
minimizeButton.Size = UDim2.new(0, 40, 0, 30)
minimizeButton.Position = UDim2.new(1, -90, 0, 10)
minimizeButton.Text = "↓"
minimizeButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
minimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
minimizeButton.TextSize = 20
minimizeButton.Font = Enum.Font.SourceSansBold
minimizeButton.Parent = frame

local isMinimized = false
minimizeButton.MouseButton1Click:Connect(function()
	if isMinimized then
		frame.Size = UDim2.new(0, 400, 0, 300)
		minimizeButton.Text = "↓"
	else
		frame.Size = UDim2.new(0, 400, 0, 40)
		minimizeButton.Text = "↑"
	end
	isMinimized = not isMinimized
end)

local closeButton = Instance.new("TextButton")
closeButton.Size = UDim2.new(0, 40, 0, 30)
closeButton.Position = UDim2.new(1, -50, 0, 10)
closeButton.Text = "X"
closeButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.TextSize = 20
closeButton.Font = Enum.Font.SourceSansBold
closeButton.Parent = frame

closeButton.MouseButton1Click:Connect(function()
	screenGui:Destroy()
end)

local minimizeCorner = Instance.new("UICorner")
minimizeCorner.CornerRadius = UDim.new(0, 12)
minimizeCorner.Parent = minimizeButton

local closeCorner = Instance.new("UICorner")
closeCorner.CornerRadius = UDim.new(0, 12)
closeCorner.Parent = closeButton

local contentFrame = Instance.new("Frame")
contentFrame.Size = UDim2.new(1, -20, 1, -50)
contentFrame.Position = UDim2.new(0, 10, 0, 40)
contentFrame.BackgroundTransparency = 1
contentFrame.Name = "ContentFrame"
contentFrame.Parent = frame

local UIListLayout = Instance.new("UIListLayout")
UIListLayout.Padding = UDim.new(0, 10)
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout.Parent = contentFrame

local monsterToggle = true
local generatorToggle = true
local itemToggle = true
local playerToggle = true

local monsterHighlights = {}
local generatorHighlights = {}
local itemHighlights = {}
local playerHighlights = {}

local function waitForCurrentRoom()
	while not workspace:FindFirstChild("CurrentRoom") do
		wait(1)
	end
	return workspace.CurrentRoom
end

local function createToggle(name, color, callback, initialState)
	local holder = Instance.new("Frame")
	holder.Size = UDim2.new(1, 0, 0, 40)
	holder.BackgroundTransparency = 1
	holder:SetAttribute("ToggleColor", color)
	holder.Parent = contentFrame

	local label = Instance.new("TextLabel")
	label.Size = UDim2.new(0.7, 0, 1, 0)
	label.BackgroundTransparency = 1
	label.Text = name
	label.TextColor3 = Color3.fromRGB(255, 255, 255)
	label.Font = Enum.Font.SourceSans
	label.TextSize = 18
	label.TextXAlignment = Enum.TextXAlignment.Left
	label.Parent = holder

	local toggle = Instance.new("Frame")
	toggle.Size = UDim2.new(0, 60, 0, 24)
	toggle.Position = UDim2.new(1, -70, 0.5, -12)
	toggle.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
	toggle.BorderSizePixel = 0
	toggle.Parent = holder

	local toggleCorner = Instance.new("UICorner")
	toggleCorner.CornerRadius = UDim.new(0, 12)
	toggleCorner.Parent = toggle

	local knob = Instance.new("Frame")
	knob.Size = UDim2.new(0, 20, 0, 20)
	knob.Position = UDim2.new(0, 2, 0, 2)
	knob.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
	knob.BorderSizePixel = 0
	knob.Parent = toggle

	local knobCorner = Instance.new("UICorner")
	knobCorner.CornerRadius = UDim.new(1, 0)
	knobCorner.Parent = knob

	local enabled = initialState
	if enabled then
		knob.Position = UDim2.new(1, -22, 0, 2)
		knob.BackgroundColor3 = color
	end

	toggle.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			enabled = not enabled
			knob:TweenPosition(
				enabled and UDim2.new(1, -22, 0, 2) or UDim2.new(0, 2, 0, 2),
				"Out", "Quad", 0.2, true
			)
			knob.BackgroundColor3 = enabled and color or Color3.fromRGB(200, 200, 200)
			callback(enabled)
		end
	end)

	return holder
end

local function destacarObjetos(config)
	for _, highlight in pairs(config.listaHighlights or {}) do
		if highlight then
			highlight:Destroy()
		end
	end
	config.listaHighlights = {}

	if not config.toggleAtivo then
		return config.listaHighlights
	end

	local currentRoom = workspace:FindFirstChild("CurrentRoom")
	if not currentRoom then return config.listaHighlights end

	for _, sala in pairs(currentRoom:GetChildren()) do
		if sala:IsA("Model") then
			local folder = sala:FindFirstChild(config.pastaNome)
			if folder then
				for _, obj in pairs(folder:GetChildren()) do
					if obj:IsA("Model") and (not config.condicaoExtra or config.condicaoExtra(obj)) then
						local highlight = Instance.new("Highlight")
						highlight.FillColor = config.cor
						highlight.OutlineColor = config.cor
						highlight.Adornee = obj
						highlight.Parent = obj
						table.insert(config.listaHighlights, highlight)
					end
				end
			end
		end
	end

	return config.listaHighlights
end

local function destacarJogadores()
	for _, highlight in pairs(playerHighlights) do
		if highlight then
			highlight:Destroy()
		end
	end
	playerHighlights = {}

	if not playerToggle then return end

	for _, player in pairs(game.Players:GetPlayers()) do
		if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
			local highlight = Instance.new("Highlight")
			highlight.FillColor = Color3.fromRGB(255, 255, 0)
			highlight.OutlineColor = Color3.fromRGB(255, 255, 0)
			highlight.Adornee = player.Character
			highlight.Parent = player.Character
			table.insert(playerHighlights, highlight)
		end
	end
end

-- Adiciona o toggle mestre
local masterToggleHolder = createToggle("TODOS", Color3.fromRGB(255, 165, 0), function(state)
	monsterToggle = state
	generatorToggle = state
	itemToggle = state
	playerToggle = state

	-- Atualiza visualmente os knobs dos outros toggles
	for _, child in ipairs(contentFrame:GetChildren()) do
		if child:IsA("Frame") and child ~= masterToggleHolder then
			local toggle = child:FindFirstChildOfClass("Frame")
			if toggle then
				local knob = toggle:FindFirstChildOfClass("Frame")
				if knob then
					knob:TweenPosition(
						state and UDim2.new(1, -22, 0, 2) or UDim2.new(0, 2, 0, 2),
						"Out", "Quad", 0.2, true
					)
					knob.BackgroundColor3 = state and child:GetAttribute("ToggleColor") or Color3.fromRGB(200, 200, 200)
				end
			end
		end
	end

	-- Ativa/desativa todos os highlights
	monsterHighlights = destacarObjetos({
		pastaNome = "Monsters",
		cor = Color3.fromRGB(255, 0, 0),
		listaHighlights = monsterHighlights,
		toggleAtivo = state,
		condicaoExtra = function(obj)
			return obj.Name:match("Monster$")
		end
	})

	generatorHighlights = destacarObjetos({
		pastaNome = "Generators",
		cor = Color3.fromRGB(0, 0, 255),
		listaHighlights = generatorHighlights,
		toggleAtivo = state
	})

	itemHighlights = destacarObjetos({
		pastaNome = "Items",
		cor = Color3.fromRGB(0, 255, 0),
		listaHighlights = itemHighlights,
		toggleAtivo = state
	})

	if state then
		destacarJogadores()
	else
		for _, highlight in pairs(playerHighlights) do
			if highlight then
				highlight:Destroy()
			end
		end
		playerHighlights = {}
	end
end, true)

-- Adiciona os toggles individuais
createToggle("Monstros", Color3.fromRGB(255, 0, 0), function(state)
	monsterToggle = state
	monsterHighlights = destacarObjetos({
		pastaNome = "Monsters",
		cor = Color3.fromRGB(255, 0, 0),
		listaHighlights = monsterHighlights,
		toggleAtivo = state,
		condicaoExtra = function(obj)
			return obj.Name:match("Monster$")
		end
	})
end, monsterToggle)

createToggle("Geradores", Color3.fromRGB(0, 0, 255), function(state)
	generatorToggle = state
	generatorHighlights = destacarObjetos({
		pastaNome = "Generators",
		cor = Color3.fromRGB(0, 0, 255),
		listaHighlights = generatorHighlights,
		toggleAtivo = state
	})
end, generatorToggle)

createToggle("Itens", Color3.fromRGB(0, 255, 0), function(state)
	itemToggle = state
	itemHighlights = destacarObjetos({
		pastaNome = "Items",
		cor = Color3.fromRGB(0, 255, 0),
		listaHighlights = itemHighlights,
		toggleAtivo = state
	})
end, itemToggle)

createToggle("Jogadores", Color3.fromRGB(255, 255, 0), function(state)
	playerToggle = state
	destacarJogadores()
end, playerToggle)

-- Conexão para atualizar quando novos objetos são adicionados
local function setupRoomConnections()
	local currentRoom = waitForCurrentRoom()

	currentRoom.ChildAdded:Connect(function(child)
		wait(1) -- Espera um pouco para garantir que o objeto esteja totalmente carregado
		if monsterToggle then
			monsterHighlights = destacarObjetos({
				pastaNome = "Monsters",
				cor = Color3.fromRGB(255, 0, 0),
				listaHighlights = monsterHighlights,
				toggleAtivo = monsterToggle,
				condicaoExtra = function(obj)
					return obj.Name:match("Monster$")
				end
			})
		end

		if generatorToggle then
			generatorHighlights = destacarObjetos({
				pastaNome = "Generators",
				cor = Color3.fromRGB(0, 0, 255),
				listaHighlights = generatorHighlights,
				toggleAtivo = generatorToggle
			})
		end

		if itemToggle then
			itemHighlights = destacarObjetos({
				pastaNome = "Items",
				cor = Color3.fromRGB(0, 255, 0),
				listaHighlights = itemHighlights,
				toggleAtivo = itemToggle
			})
		end
	end)
end

-- Inicialização dos highlights
spawn(function()
	setupRoomConnections()

	monsterHighlights = destacarObjetos({
		pastaNome = "Monsters",
		cor = Color3.fromRGB(255, 0, 0),
		listaHighlights = monsterHighlights,
		toggleAtivo = monsterToggle,
		condicaoExtra = function(obj)
			return obj.Name:match("Monster$")
		end
	})

	generatorHighlights = destacarObjetos({
		pastaNome = "Generators",
		cor = Color3.fromRGB(0, 0, 255),
		listaHighlights = generatorHighlights,
		toggleAtivo = generatorToggle
	})

	itemHighlights = destacarObjetos({
		pastaNome = "Items",
		cor = Color3.fromRGB(0, 255, 0),
		listaHighlights = itemHighlights,
		toggleAtivo = itemToggle
	})

	destacarJogadores()
end)

-- Conexão para jogadores entrando/saindo
game.Players.PlayerAdded:Connect(function()
	if playerToggle then
		destacarJogadores()
	end
end)

game.Players.PlayerRemoving:Connect(function()
	if playerToggle then
		destacarJogadores()
	end
end)
