-- Criação da tela principal
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Criando o quadro (janela)
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 400, 0, 300)
frame.Position = UDim2.new(0.5, -200, 0.5, -150)
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
frame.BorderSizePixel = 0
frame.ClipsDescendants = true
frame.Parent = screenGui

-- Bordas arredondadas
local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 20)
UICorner.Parent = frame

-- Título no cabeçalho
local headerLabel = Instance.new("TextLabel")
headerLabel.Size = UDim2.new(0.7, 0, 0, 40)  -- Ajusta o título para ficar mais à esquerda
headerLabel.Position = UDim2.new(0, 10, 0, 0)  -- Move o título para a esquerda
headerLabel.Text = "MGI View by Nightmice x ChatGpt"
headerLabel.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
headerLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
headerLabel.TextSize = 16
headerLabel.Font = Enum.Font.SourceSansBold
headerLabel.TextXAlignment = Enum.TextXAlignment.Left  -- Alinha o texto à esquerda
headerLabel.Parent = frame

-- Tornar a janela arrastável
local dragging, dragInput, dragStart, startPos
frame.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		dragging = true
		dragStart = input.Position
		startPos = frame.Position
	end
end)
frame.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
		local delta = input.Position - dragStart
		frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end
end)
frame.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		dragging = false
	end
end)

-- Botão de minimizar
local minimizeButton = Instance.new("TextButton")
minimizeButton.Size = UDim2.new(0, 40, 0, 30)
minimizeButton.Position = UDim2.new(1, -90, 0, 10)  -- Ajusta a posição do botão de minimizar
minimizeButton.Text = "-"
minimizeButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
minimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
minimizeButton.TextSize = 20
minimizeButton.Font = Enum.Font.SourceSansBold
minimizeButton.Parent = frame

-- Botão de fechar
local closeButton = Instance.new("TextButton")
closeButton.Size = UDim2.new(0, 40, 0, 30)
closeButton.Position = UDim2.new(1, -50, 0, 10)  -- Ajusta a posição do botão de fechar
closeButton.Text = "X"
closeButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.TextSize = 20
closeButton.Font = Enum.Font.SourceSansBold
closeButton.Parent = frame

-- Adicionando bordas arredondadas aos botões
local minimizeCorner = Instance.new("UICorner")
minimizeCorner.CornerRadius = UDim.new(0, 12)
minimizeCorner.Parent = minimizeButton

local closeCorner = Instance.new("UICorner")
closeCorner.CornerRadius = UDim.new(0, 12)
closeCorner.Parent = closeButton

-- Container do conteúdo (baixo do cabeçalho)
local contentFrame = Instance.new("Frame")
contentFrame.Size = UDim2.new(1, -20, 1, -50)
contentFrame.Position = UDim2.new(0, 10, 0, 40)
contentFrame.BackgroundTransparency = 1
contentFrame.Name = "ContentFrame"
contentFrame.Parent = frame

local UIListLayout = Instance.new("UIListLayout")
UIListLayout.Padding = UDim.new(0, 10)
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout.Parent = contentFrame

-- Variáveis globais
local monsterToggle = true
local generatorToggle = true
local itemToggle = true

local monsterHighlights = {}
local generatorHighlights = {}
local itemHighlights = {}

-- Função de criar toggle
local function createToggle(name, color, callback)
	local holder = Instance.new("Frame")
	holder.Size = UDim2.new(1, 0, 0, 40)
	holder.BackgroundTransparency = 1
	holder.Parent = contentFrame

	local label = Instance.new("TextLabel")
	label.Size = UDim2.new(0.7, 0, 1, 0)
	label.BackgroundTransparency = 1
	label.Text = name
	label.TextColor3 = Color3.fromRGB(255, 255, 255)
	label.Font = Enum.Font.SourceSans
	label.TextSize = 18
	label.TextXAlignment = Enum.TextXAlignment.Left
	label.Parent = holder

	local toggle = Instance.new("Frame")
	toggle.Size = UDim2.new(0, 60, 0, 24)
	toggle.Position = UDim2.new(1, -70, 0.5, -12)
	toggle.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
	toggle.BorderSizePixel = 0
	toggle.Parent = holder

	local toggleCorner = Instance.new("UICorner")
	toggleCorner.CornerRadius = UDim.new(0, 12)
	toggleCorner.Parent = toggle

	local knob = Instance.new("Frame")
	knob.Size = UDim2.new(0, 20, 0, 20)
	knob.Position = UDim2.new(0, 2, 0, 2)
	knob.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
	knob.BorderSizePixel = 0
	knob.Parent = toggle

	local knobCorner = Instance.new("UICorner")
	knobCorner.CornerRadius = UDim.new(1, 0)
	knobCorner.Parent = knob

	local enabled = false
	toggle.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			enabled = not enabled
			knob:TweenPosition(
				enabled and UDim2.new(1, -22, 0, 2) or UDim2.new(0, 2, 0, 2),
				"Out", "Quad", 0.2, true
			)
			knob.BackgroundColor3 = enabled and color or Color3.fromRGB(200, 200, 200)
			callback(enabled)
		end
	end)
end

-- Criar botões de toggle
createToggle("Monstros", Color3.fromRGB(255, 0, 0), function(state)
	monsterToggle = state
	destacarMonstros()
end)

createToggle("Geradores", Color3.fromRGB(0, 0, 255), function(state)
	generatorToggle = state
	destacarGeradores()
end)

createToggle("Itens", Color3.fromRGB(0, 255, 0), function(state)
	itemToggle = state
	destacarItens()
end)

-- Função de destacar monstros
function destacarMonstros()
	if not monsterToggle then
		-- Remove os destaques se o toggle estiver desligado
		for _, h in pairs(monsterHighlights) do h:Destroy() end
		monsterHighlights = {}
		return
	end

	-- Remove os destaques anteriores
	for _, h in pairs(monsterHighlights) do h:Destroy() end
	monsterHighlights = {}

	local currentRoom = workspace:FindFirstChild("CurrentRoom")
	if currentRoom then
		for _, sala in pairs(currentRoom:GetChildren()) do
			if sala:IsA("Model") then
				local monstersFolder = sala:FindFirstChild("Monsters")
				if monstersFolder then
					for _, monstro in pairs(monstersFolder:GetChildren()) do
						if monstro:IsA("Model") and monstro.Name:match("Monster$") then
							local highlight = Instance.new("Highlight")
							highlight.FillColor = Color3.fromRGB(255, 0, 0)
							highlight.OutlineColor = Color3.fromRGB(255, 0, 0)
							highlight.Adornee = monstro
							highlight.Parent = monstro
							table.insert(monsterHighlights, highlight)
						end
					end
				end
			end
		end
	end
end

function destacarGeradores()
	if not generatorToggle then
		for _, h in pairs(generatorHighlights) do h:Destroy() end
		generatorHighlights = {}
		return
	end

	for _, h in pairs(generatorHighlights) do h:Destroy() end
	generatorHighlights = {}

	local currentRoom = workspace:FindFirstChild("CurrentRoom")
	if currentRoom then
		for _, sala in pairs(currentRoom:GetChildren()) do
			if sala:IsA("Model") then
				local generatorsFolder = sala:FindFirstChild("Generators")
				if generatorsFolder then
					for _, generator in pairs(generatorsFolder:GetChildren()) do
						if generator:IsA("Model") then
							local highlight = Instance.new("Highlight")
							highlight.FillColor = Color3.fromRGB(0, 0, 255)
							highlight.OutlineColor = Color3.fromRGB(0, 0, 255)
							highlight.Adornee = generator
							highlight.Parent = generator
							table.insert(generatorHighlights, highlight)
						end
					end
				end
			end
		end
	end
end

-- Função de destacar itens
function destacarItens()
	if not itemToggle then
		-- Remove os destaques se o toggle estiver desligado
		for _, h in pairs(itemHighlights) do h:Destroy() end
		itemHighlights = {}
		return
	end

	-- Remove os destaques anteriores
	for _, h in pairs(itemHighlights) do h:Destroy() end
	itemHighlights = {}

	local currentRoom = workspace:FindFirstChild("CurrentRoom")
	if currentRoom then
		for _, sala in pairs(currentRoom:GetChildren()) do
			if sala:IsA("Model") then
				local itemsFolder = sala:FindFirstChild("Items")
				if itemsFolder then
					for _, item in pairs(itemsFolder:GetChildren()) do
						if item:IsA("Model") then
							local highlight = Instance.new("Highlight")
							highlight.FillColor = Color3.fromRGB(0, 255, 0)
							highlight.OutlineColor = Color3.fromRGB(0, 255, 0)
							highlight.Adornee = item
							highlight.Parent = item
							table.insert(itemHighlights, highlight)
						end
					end
				end
			end
		end
	end
end

-- Funcionalidade de minimizar a janela
local isMinimized = false
minimizeButton.MouseButton1Click:Connect(function()
	isMinimized = not isMinimized
	if isMinimized then
		frame.Size = UDim2.new(0, 400, 0, 40)  -- Reduz a altura da janela para apenas mostrar o cabeçalho
		contentFrame.Visible = false  -- Esconde o conteúdo
	else
		frame.Size = UDim2.new(0, 400, 0, 300)  -- Restaura o tamanho da janela
		contentFrame.Visible = true  -- Exibe o conteúdo
	end
end)

-- Funcionalidade do botão de fechar (fade-out e destruição da janela)
closeButton.MouseButton1Click:Connect(function()
	frame:TweenPosition(UDim2.new(0.5, -200, 0.5, -150), "Out", "Quad", 0.5, true, function()
		screenGui:Destroy()  -- Destrói a UI após o fade-out
	end)
end)
